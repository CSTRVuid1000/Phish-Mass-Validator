#!/usr/bin/env python3
import imaplib
import email
import time
import schedule
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import smtplib
from email.utils import formataddr
import ssl

def read_senders():
    """–ß–∏—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    senders = []
    with open('data/senders.txt', 'r', encoding='utf-8') as f:
        for line in f:
            email, password, name = line.strip().split(':')
            senders.append({
                'email': email,
                'password': password,
                'name': name
            })
    return senders

def send_auto_reply(sender_email, sender_password, recipient_email, sender_name, original_subject, original_message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø–∏—Å—å–º–æ —Å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        msg = MIMEMultipart()
        msg["From"] = formataddr((sender_name, sender_email))
        msg["To"] = recipient_email
        msg["Subject"] = f"Re: {original_subject}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        reply_body = f"""–í—ñ—Ç–∞—é!

–í–∏–±–∞—á–∞—é—Å—å –∑–∞ –∑–∞–Ω–µ–ø–æ–∫–æ—î–Ω–Ω—è. –ü–∏—Ç–∞–Ω–Ω—è –≤–∏—Ä—ñ—à–µ–Ω–æ. –î—è–∫—É—é!

–ó –ø–æ–≤–∞–≥–æ—é,
{sender_name}

-------- –ü–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è --------
{original_message}"""

        msg.attach(MIMEText(reply_body, 'plain', 'utf-8'))

        ctx = ssl.create_default_context()
        with smtplib.SMTP("smtp.gmx.com", 587) as server:
            server.starttls(context=ctx)
            server.login(sender_email, sender_password)
            server.send_message(msg)
        
        print(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {recipient_email}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        return False

def save_responded_email(email_address):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –≤ —Ñ–∞–π–ª"""
    try:
        with open('data/responded_emails.txt', 'a', encoding='utf-8') as f:
            f.write(f"{email_address}\n")
        print(f"üìù –ê–¥—Ä–µ—Å {email_address} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: {e}")

def read_blacklist():
    """–ß–∏—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö email –∞–¥—Ä–µ—Å–æ–≤"""
    with open('data/blacklist.txt', 'r', encoding='utf-8') as f:
        return {line.strip().lower() for line in f if line.strip()}

def is_blacklisted(email):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ email –≤ –±–ª—ç–∫–ª–∏—Å—Ç–µ"""
    return email.lower() in read_blacklist()

def safe_decode(text, encodings=('utf-8', 'cp1251', 'koi8-r', 'iso-8859-1')):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç, –ø—Ä–æ–±—É—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
    if isinstance(text, str):
        return text
    
    for encoding in encodings:
        try:
            return text.decode(encoding)
        except UnicodeDecodeError:
            continue
    
    # –ï—Å–ª–∏ –≤—Å–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç —Å –∑–∞–º–µ–Ω–æ–π –Ω–µ—á–∏—Ç–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    return text.decode('utf-8', errors='replace')

def read_responded_emails():
    """–ß–∏—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö email –∞–¥—Ä–µ—Å–æ–≤"""
    try:
        with open('data/responded_emails.txt', 'r', encoding='utf-8') as f:
            return {line.strip().lower() for line in f if line.strip()}
    except FileNotFoundError:
        print("‚ÑπÔ∏è –§–∞–π–ª responded_emails.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.")
        with open('data/responded_emails.txt', 'w', encoding='utf-8') as f:
            pass
        return set()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: {e}")
        return set()

def delete_message(mail, msg_id):
    """–£–¥–∞–ª—è–µ—Ç –ø–∏—Å—å–º–æ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID"""
    try:
        mail.store(msg_id, '+FLAGS', '\\Deleted')
        mail.expunge()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∏—Å—å–º–∞: {e}")
        return False

def check_and_reply_to_unread(sender):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É
        mail = imaplib.IMAP4_SSL("imap.gmx.com")
        mail.login(sender['email'], sender['password'])
        mail.select('inbox')

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
        responded_emails = read_responded_emails()

        # –ò—â–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
        status, messages = mail.search(None, 'UNSEEN')
        
        if status != 'OK':
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∏—Å–µ–º –¥–ª—è {sender['email']}")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
        unread_messages = messages[0].split()
        
        if not unread_messages:
            print(f"‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º –¥–ª—è {sender['email']}")
            return

        print(f"üìß –ù–∞–π–¥–µ–Ω–æ {len(unread_messages)} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –¥–ª—è {sender['email']}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ
        for msg_id in unread_messages:
            status, msg_data = mail.fetch(msg_id, '(RFC822)')
            if status != 'OK' or not msg_data or not msg_data[0]:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ –¥–ª—è {msg_id}")
                continue

            email_body = msg_data[0][1]
            email_message = email.message_from_bytes(email_body)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            from_header = email_message.get('From', '')
            if not from_header:
                print(f"‚ö†Ô∏è –ü–∏—Å—å–º–æ {msg_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ From")
                continue
                
            from_addr = email.utils.parseaddr(from_header)[1]
            if not from_addr:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ {from_header}")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –±–ª—ç–∫–ª–∏—Å—Ç–µ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏ –Ω–µ –æ—Ç–≤–µ—á–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ
            if is_blacklisted(from_addr):
                print(f"‚õî –£–¥–∞–ª—è–µ–º –ø–∏—Å—å–º–æ –æ—Ç {from_addr} (–≤ –±–ª—ç–∫–ª–∏—Å—Ç–µ)")
                if delete_message(mail, msg_id):
                    print(f"‚úÖ –ü–∏—Å—å–º–æ –æ—Ç {from_addr} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
                continue
                
            if from_addr.lower() in responded_emails:
                print(f"‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∏—Å—å–º–æ –æ—Ç {from_addr} (—É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏)")
                mail.store(msg_id, '+FLAGS', '\\Seen')
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –∏ —Ç–µ–∫—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
            original_subject = email_message['Subject'] or '–ë–µ–∑ —Ç–µ–º–∏'
            original_message = ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
            if email_message.is_multipart():
                for part in email_message.walk():
                    if part.get_content_type() == "text/plain":
                        try:
                            payload = part.get_payload(decode=True)
                            if payload:
                                original_message = safe_decode(payload)
                            break
                        except Exception as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Å—Ç–∏ –ø–∏—Å—å–º–∞: {e}")
                            original_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞"
            else:
                try:
                    payload = email_message.get_payload(decode=True)
                    if payload:
                        original_message = safe_decode(payload)
                    else:
                        original_message = "–ü—É—Å—Ç–æ–µ –ø–∏—Å—å–º–æ"
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏—Å—å–º–∞: {e}")
                    original_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
            if send_auto_reply(sender['email'], sender['password'], from_addr, sender['name'], 
                             original_subject, original_message):
                # –û—Ç–º–µ—á–∞–µ–º –ø–∏—Å—å–º–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                mail.store(msg_id, '+FLAGS', '\\Seen')
                print(f"‚úÖ –ü–∏—Å—å–º–æ –æ—Ç {from_addr} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –≤ —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ –±–ª—ç–∫–ª–∏—Å—Ç–µ
                if not is_blacklisted(from_addr):
                    save_responded_email(from_addr)

        mail.close()
        mail.logout()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å–µ–º –¥–ª—è {sender['email']}: {e}")

def check_all_accounts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º"""
    print("\nüîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏—Å–µ–º...")
    senders = read_senders()
    
    for sender in senders:
        print(f"\nüìß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {sender['email']}")
        check_and_reply_to_unread(sender)
        time.sleep(5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ IMAP-—Å–ª—É—à–∞—Ç–µ–ª—è...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–∞–∑—É
    check_all_accounts()
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    schedule.every(10).minutes.do(check_all_accounts)
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == "__main__":
    main() 